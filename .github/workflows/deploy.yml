name: Build And Deploy Docker Image

on:
  push:
    #    branches: [main]
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: production
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Get version without 'v'
        id: get_version
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION=$(echo "$VERSION" | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.actor }}/${{ vars.APP_NAME }}:${{ steps.get_version.outputs.version }}
          build-args: |
            MySQL_URL=${{ secrets.DATABASE_URL }}

      # - name: ssh remote deploy
      #   uses: fifsky/ssh-action@master
      #   with:
      #     command: |
      #       cd /
      #       echo -e "1.docker login start==>"
      #       echo ${{ secrets.ALIYUN_DOCKER_PASSWORD }} | docker login ${{ vars.REGISTRY_MIRROR }} --username ${{ secrets.ALIYUN_DOCKER_USERNAME }} --password-stdin

      #       echo -e "2.docker stop myblog container==>"
      #       docker container stop ${{ vars.APP_NAME }}

      #       echo -e "3.docker conatainer rm==>"
      #       docker container rm ${{ vars.APP_NAME }}

      #       echo -e "4.docker image rm==>"
      #       docker image rm ${{ vars.REGISTRY_MIRROR }}/${{ vars.REGISTRY_NAMESPACE }}/${{ vars.APP_NAME }}:latest

      #       echo -e "5.docker pull==>"
      #       docker pull ${{ vars.REGISTRY_MIRROR }}/${{ vars.REGISTRY_NAMESPACE }}/${{ vars.APP_NAME }}:latest

      #       echo -e "6.docker container create and start==>"
      #       docker container run -d -p 3000:3000 --name ${{ vars.APP_NAME }} ${{ vars.REGISTRY_MIRROR }}/${{ vars.REGISTRY_NAMESPACE }}/${{ vars.APP_NAME }}:latest

      #       echo -e "7.docker logout==>"
      #       docker logout
      #     host: ${{ secrets.NAS_HOST }}
      #     user: ${{ secrets.NAS_USER }}
      #     pass: ${{ secrets.NAS_PASSWORD }}